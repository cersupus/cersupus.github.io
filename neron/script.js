/*
// === –¢–∞–±—ã ===
const tabButtons = document.querySelectorAll('.tab-btn')
const tabContents = document.querySelectorAll('.tab-content')

tabButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    const target = btn.dataset.tab
    tabContents.forEach(tc => {
      tc.classList.toggle('active', tc.id === target)
    })
  })
})

// === 1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –°–æ–±–∞–∫–∞/–ö–æ—à–∫–∞ ===
const classifyUpload = document.getElementById('classifyUpload')
const classifyImg = document.getElementById('classifyImg')
const classifyBtn = document.getElementById('classifyBtn')
const classifyResult = document.getElementById('classifyResult')

let classifyModel = null

// –ú–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–ø–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω–∞—è MobileNet –¥–ª—è cats vs dogs)
// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å TensorFlow Hub ‚Äî —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–¥–µ–ª—å cats-vs-dogs (–ø—Ä–∏–º–µ—Ä –∏–∑ tfhub.dev):
// –ù–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –æ–±—ã—á–Ω–æ –±–µ—Ä—É—Ç —É–ø—Ä–æ—â—ë–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏.
// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑—å–º—ë–º mobilenet –∏ –¥–æ–ø–æ–ª–Ω–∏–º –≤ –∫–æ–¥–µ (demo):

const MODEL_URL = 'https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json'

// –ó–∞–≥—Ä—É–∑–∏–º MobileNet (–æ–±—É—á–µ–Ω –Ω–∞ ImageNet, —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª–∞—Å—Å—ã: 'cat', 'dog' —Ç–∞–º —Ç–æ–∂–µ –µ—Å—Ç—å)
// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –æ–±—É—á–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è 2 –∫–ª–∞—Å—Å–æ–≤, –Ω–æ —Å–µ–π—á–∞—Å –¥–ª—è –¥–µ–º–æ —Ç–∞–∫

async function loadClassifyModel() {
  classifyResult.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...'
  classifyModel = await tf.loadLayersModel(MODEL_URL)
  classifyResult.textContent = '–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
}

loadClassifyModel()

classifyUpload.addEventListener('change', () => {
  const file = classifyUpload.files[0]
  if (!file) return
  const url = URL.createObjectURL(file)
  classifyImg.src = url
  classifyResult.textContent = ''
})

classifyBtn.addEventListener('click', async () => {
  if (!classifyModel) {
    classifyResult.textContent = '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
    return
  }
  if (!classifyImg.src) {
    classifyResult.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    return
  }

  // –ü–æ–¥–≥–æ—Ç–æ–≤–∏–º –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è –º–æ–¥–µ–ª–∏ MobileNet
  const img = document.createElement('img')
  img.crossOrigin = 'anonymous'
  img.src = classifyImg.src

  img.onload = async () => {
    let tensor = tf.browser.fromPixels(img).resizeNearestNeighbor([224, 224]).toFloat()
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º (MobileNet —Ç—Ä–µ–±—É–µ—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é)
    tensor = tensor.div(255).expandDims()

    // –ü–æ–ª—É—á–∏–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    const predictions = await classifyModel.predict(tensor).data()

    // –í ImageNet –∏–Ω–¥–µ–∫—Å 'cat' - 281-285, 'dog' - 151-268 (–º–Ω–æ–≥–æ –∫–ª–∞—Å—Å–æ–≤ —Å–æ–±–∞–∫)
    // –ú—ã —Å–¥–µ–ª–∞–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—É—é –ª–æ–≥–∏–∫—É: —Å—É–º–º–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫

    // –ò–Ω–¥–µ–∫—Å—ã –∫–ª–∞—Å—Å–æ–≤ ImageNet –¥–ª—è –∫–æ—à–µ–∫ (5 –∫–ª–∞—Å—Å–æ–≤):
    const catIndices = [281, 282, 283, 284, 285]
    // –ò–Ω–¥–µ–∫—Å—ã –∫–ª–∞—Å—Å–æ–≤ ImageNet –¥–ª—è —Å–æ–±–∞–∫ (118 –∫–ª–∞—Å—Å–æ–≤):
    const dogIndices = [
      151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,
      170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,
      189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
      208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,
      227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,
      246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,
      265,266,267,268
    ]

    let catProb = 0
    for (const i of catIndices) catProb += predictions[i]
    let dogProb = 0
    for (const i of dogIndices) dogProb += predictions[i]

    // –ò—Ç–æ–≥
    let label, confidence
    if (catProb > dogProb) {
      label = '–ö–æ—à–∫–∞'
      confidence = catProb
    } else {
      label = '–°–æ–±–∞–∫–∞'
      confidence = dogProb
    }

    classifyResult.textContent = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${label} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${(confidence*100).toFixed(2)}%)`
  }
})

// === 2. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è BodyPix ===

const segmentUpload = document.getElementById('segmentUpload')
const segImageCanvas = document.getElementById('segImageCanvas')
const segMaskCanvas = document.getElementById('segMaskCanvas')
const segmentBtn = document.getElementById('segmentBtn')

const segImageCtx = segImageCanvas.getContext('2d')
const segMaskCtx = segMaskCanvas.getContext('2d')

let bodyPixModel = null
let segImageElement = new Image()

segmentUpload.addEventListener('change', (e) => {
  const file = e.target.files[0]
  if (!file) return
  const reader = new FileReader()
  reader.onload = () => {
    segImageElement.onload = () => {
      segImageCtx.clearRect(0, 0, segImageCanvas.width, segImageCanvas.height)
      segMaskCtx.clearRect(0, 0, segMaskCanvas.width, segMaskCanvas.height)
      segImageCtx.drawImage(segImageElement, 0, 0, segImageCanvas.width, segImageCanvas.height)
    }
    segImageElement.src = reader.result
  }
  reader.readAsDataURL(file)
})

segmentBtn.addEventListener('click', async () => {
  if (!segImageElement.src) {
    alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')
    return
  }
  if (!bodyPixModel) {
    bodyPixModel = await bodyPix.load()
  }

  const segmentation = await bodyPixModel.segmentPerson(segImageCanvas, {
    internalResolution: 'medium',
    segmentationThreshold: 0.7
  })

  const mask = bodyPix.toMask(segmentation)

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å–∫—É –Ω–∞ –º–∞—Å–∫–∞-–∫–∞–Ω–≤–∞—Å–µ (–ª–µ–≤–∞—è –ø–∞–Ω–µ–ª—å)
  bodyPix.drawMask(segMaskCanvas, segImageCanvas, mask, {
    opacity: 0.8,
    maskBlurAmount: 0,
    flipHorizontal: false
  })
})

// === 3. –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ ===

const boardDiv = document.getElementById('ticTacToeBoard')
const statusP = document.getElementById('ticTacToeStatus')
const resetBtn = document.getElementById('ticTacToeResetBtn')

let boardState = Array(9).fill(null)  // null = –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞
let playerTurn = true  // true = –∏–≥—Ä–æ–∫ X, false = –ò–ò O
let gameOver = false

// –†–µ–Ω–¥–µ—Ä–∏–º –¥–æ—Å–∫—É
function renderBoard() {
  boardDiv.innerHTML = ''
  boardState.forEach((cell, i) => {
    const cellDiv = document.createElement('div')
    cellDiv.classList.add('cell')
    if (cell !== null) {
      cellDiv.textContent = cell
      cellDiv.classList.add('disabled')
    }
    if (gameOver) {
      cellDiv.classList.add('disabled')
    }
    cellDiv.addEventListener('click', () => playerMove(i))
    boardDiv.appendChild(cellDiv)
  })
  updateStatus()
}

function updateStatus() {
  if (gameOver) return
  statusP.textContent = playerTurn ? '–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (X)' : '–•–æ–¥ –ò–ò (O)'
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
function checkWin(b, player) {
  const wins = [
    [0,1,2], [3,4,5], [6,7,8], // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
    [0,3,6], [1,4,7], [2,5,8], // –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    [0,4,8], [2,4,6]           // –¥–∏–∞–≥–æ–Ω–∞–ª–∏
  ]
  return wins.some(line => line.every(i => b[i] === player))
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∏—á—å–∏
function checkDraw(b) {
  return b.every(cell => cell !== null)
}

// –•–æ–¥ –∏–≥—Ä–æ–∫–∞
function playerMove(i) {
  if (!playerTurn || gameOver || boardState[i] !== null) return
  boardState[i] = 'X'
  playerTurn = false
  renderBoard()
  if (checkWin(boardState, 'X')) {
    statusP.textContent = '–ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª! üéâ'
    gameOver = true
    return
  }
  if (checkDraw(boardState)) {
    statusP.textContent = '–ù–∏—á—å—è!'
    gameOver = true
    return
  }
  // –•–æ–¥ –ò–ò
  setTimeout(aiMove, 500)
}

// –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –ò–ò ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
function aiMove() {
  if (gameOver) return
  let emptyIndices = boardState.map((v,i) => v === null ? i : null).filter(i => i !== null)
  if (emptyIndices.length === 0) return
  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥
  const choice = emptyIndices[Math.floor(Math.random() * emptyIndices.length)]
  boardState[choice] = 'O'
  playerTurn = true
  renderBoard()
  if (checkWin(boardState, 'O')) {
    statusP.textContent = '–ò–ò –≤—ã–∏–≥—Ä–∞–ª! ü§ñ'
    gameOver = true
    return
  }
  if (checkDraw(boardState)) {
    statusP.textContent = '–ù–∏—á—å—è!'
    gameOver = true
    return
  }
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
resetBtn.addEventListener('click', () => {
  boardState = Array(9).fill(null)
  playerTurn = true
  gameOver = false
  renderBoard()
})

renderBoard()
*/
// === –¢–∞–±—ã ===
// –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–∫–ª–∞–¥–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫
const tabButtons = document.querySelectorAll('.tab-btn')
const tabContents = document.querySelectorAll('.tab-content')

// –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –≤–∫–ª–∞–¥–∫–∏
tabButtons.forEach(btn => {
  btn.addEventListener('click', () => {
    const target = btn.dataset.tab  // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≤–∫–ª–∞–¥–∫–∏ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-tab
    tabContents.forEach(tc => {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É (—É –∫–æ—Ç–æ—Ä–æ–π id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å target)
      tc.classList.toggle('active', tc.id === target)
    })
  })
})

// === 1. –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –°–æ–±–∞–∫–∞/–ö–æ—à–∫–∞ ===
// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–Ω–æ–ø–∫–∏ –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
const classifyUpload = document.getElementById('classifyUpload')
const classifyImg = document.getElementById('classifyImg')
const classifyBtn = document.getElementById('classifyBtn')
const classifyResult = document.getElementById('classifyResult')

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
let classifyModel = null

// URL –º–æ–¥–µ–ª–∏ MobileNet
const MODEL_URL = 'https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_0.25_224/model.json'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async function loadClassifyModel() {
  classifyResult.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...'
  classifyModel = await tf.loadLayersModel(MODEL_URL)
  classifyResult.textContent = '–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.'
}
loadClassifyModel()

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
classifyUpload.addEventListener('change', () => {
  const file = classifyUpload.files[0]
  if (!file) return
  const url = URL.createObjectURL(file)
  classifyImg.src = url
  classifyResult.textContent = ''
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å"
classifyBtn.addEventListener('click', async () => {
  if (!classifyModel) {
    classifyResult.textContent = '–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'
    return
  }
  if (!classifyImg.src) {
    classifyResult.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    return
  }

  const img = document.createElement('img')
  img.crossOrigin = 'anonymous'
  img.src = classifyImg.src

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –µ–≥–æ –∑–∞–≥—Ä—É–∑–∫–µ
  img.onload = async () => {
    let tensor = tf.browser.fromPixels(img).resizeNearestNeighbor([224, 224]).toFloat()
    tensor = tensor.div(255).expandDims()  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

    const predictions = await classifyModel.predict(tensor).data()

    // –ò–Ω–¥–µ–∫—Å—ã –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–æ—à–µ–∫ –∏ —Å–æ–±–∞–∫ –≤ ImageNet
    const catIndices = [281, 282, 283, 284, 285]
    const dogIndices = [151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,
      170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,
      189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,
      208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,
      227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,
      246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,
      265,266,267,268
    ]

    // –°—É–º–º–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    let catProb = 0
    for (const i of catIndices) catProb += predictions[i]
    let dogProb = 0
    for (const i of dogIndices) dogProb += predictions[i]

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é –º–µ—Ç–∫—É
    let label, confidence
    if (catProb > dogProb) {
      label = '–ö–æ—à–∫–∞'
      confidence = catProb
    } else {
      label = '–°–æ–±–∞–∫–∞'
      confidence = dogProb
    }

    classifyResult.textContent = `–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${label} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${(confidence*100).toFixed(2)}%)`
  }
})

// === 2. –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è BodyPix ===
// –ü–æ–ª—É—á–∞–µ–º DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const segmentUpload = document.getElementById('segmentUpload')
const segImageCanvas = document.getElementById('segImageCanvas')
const segMaskCanvas = document.getElementById('segMaskCanvas')
const segmentBtn = document.getElementById('segmentBtn')

const segImageCtx = segImageCanvas.getContext('2d')
const segMaskCtx = segMaskCanvas.getContext('2d')

let bodyPixModel = null
let segImageElement = new Image()

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
segmentUpload.addEventListener('change', (e) => {
  const file = e.target.files[0]
  if (!file) return
  const reader = new FileReader()
  reader.onload = () => {
    segImageElement.onload = () => {
      segImageCtx.clearRect(0, 0, segImageCanvas.width, segImageCanvas.height)
      segMaskCtx.clearRect(0, 0, segMaskCanvas.width, segMaskCanvas.height)
      segImageCtx.drawImage(segImageElement, 0, 0, segImageCanvas.width, segImageCanvas.height)
    }
    segImageElement.src = reader.result
  }
  reader.readAsDataURL(file)
})

// –ö–Ω–æ–ø–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
segmentBtn.addEventListener('click', async () => {
  if (!segImageElement.src) {
    alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!')
    return
  }
  if (!bodyPixModel) {
    bodyPixModel = await bodyPix.load()
  }

  const segmentation = await bodyPixModel.segmentPerson(segImageCanvas, {
    internalResolution: 'medium',
    segmentationThreshold: 0.7
  })

  const mask = bodyPix.toMask(segmentation)

  bodyPix.drawMask(segMaskCanvas, segImageCanvas, mask, {
    opacity: 0.8,
    maskBlurAmount: 0,
    flipHorizontal: false
  })
})

// === 3. –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏ ===
// DOM-—ç–ª–µ–º–µ–Ω—Ç—ã
const boardDiv = document.getElementById('ticTacToeBoard')
const statusP = document.getElementById('ticTacToeStatus')
const resetBtn = document.getElementById('ticTacToeResetBtn')

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let boardState = Array(9).fill(null)
let playerTurn = true
let gameOver = false

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å–∫–∏
function renderBoard() {
  boardDiv.innerHTML = ''
  boardState.forEach((cell, i) => {
    const cellDiv = document.createElement('div')
    cellDiv.classList.add('cell')
    if (cell !== null) {
      cellDiv.textContent = cell
      cellDiv.classList.add('disabled')
    }
    if (gameOver) {
      cellDiv.classList.add('disabled')
    }
    cellDiv.addEventListener('click', () => playerMove(i))
    boardDiv.appendChild(cellDiv)
  })
  updateStatus()
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function updateStatus() {
  if (gameOver) return
  statusP.textContent = playerTurn ? '–•–æ–¥ –∏–≥—Ä–æ–∫–∞ (X)' : '–•–æ–¥ –ò–ò (O)'
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function checkWin(b, player) {
  const wins = [
    [0,1,2], [3,4,5], [6,7,8],
    [0,3,6], [1,4,7], [2,5,8],
    [0,4,8], [2,4,6]
  ]
  return wins.some(line => line.every(i => b[i] === player))
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∏—á—å—é
function checkDraw(b) {
  return b.every(cell => cell !== null)
}

// –•–æ–¥ –∏–≥—Ä–æ–∫–∞
function playerMove(i) {
  if (!playerTurn || gameOver || boardState[i] !== null) return
  boardState[i] = 'X'
  playerTurn = false
  renderBoard()
  if (checkWin(boardState, 'X')) {
    statusP.textContent = '–ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª!'
    gameOver = true
    return
  }
  if (checkDraw(boardState)) {
    statusP.textContent = '–ù–∏—á—å—è!'
    gameOver = true
    return
  }
  setTimeout(aiMove, 500)
}

// –•–æ–¥ –ò–ò (—Ä–∞–Ω–¥–æ–º–Ω–æ)
function aiMove() {
  if (gameOver) return
  let emptyIndices = boardState.map((v,i) => v === null ? i : null).filter(i => i !== null)
  if (emptyIndices.length === 0) return
  const choice = emptyIndices[Math.floor(Math.random() * emptyIndices.length)]
  boardState[choice] = 'O'
  playerTurn = true
  renderBoard()
  if (checkWin(boardState, 'O')) {
    statusP.textContent = '–ò–ò –≤—ã–∏–≥—Ä–∞–ª!'
    gameOver = true
    return
  }
  if (checkDraw(boardState)) {
    statusP.textContent = '–ù–∏—á—å—è!'
    gameOver = true
    return
  }
}

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
resetBtn.addEventListener('click', () => {
  boardState = Array(9).fill(null)
  playerTurn = true
  gameOver = false
  renderBoard()
})

renderBoard()  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
